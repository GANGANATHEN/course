----------------------------------------------------------------------------day-2---------------------------------------------------------------------------

JAVA - Just Another Virtual Accelerator

--> java is a tightly scripted language and homogeneous

--> javaScript is a loosly scripted language and heterogeneous

structure of JAVA-:-->
------------------

public class cassname{

public static void main(string[]args){

System.out.println("Hello God");
}
}

How to create a class?
------------------------

->class name is first letter is capital (for user identification)

syntax:
-------
Accessmodifier(or)Accesspecifier class classname{
  //code
}



Accessmodifier is four types{
-->public -> you can access any class
-->private -> you can access only with in class
-->protected -> you can use child and its familier class
-->Default -> you can access within class you use.
}

how to create a method?
-----------------------

syntax:
-------
Accessmodifier static returntype methodname(parameter){
	//code
}

static -> is optional
returntype -> means datatype or void(it means null value)

Java Data Types:
----------------

premitive Data Types{
->byte     - 8bit
->short    - 16bit
->int	   - 32bit range ->> -2147463647 to +2147463646
->long     - 64bit
->float	   - 32bit
->double   - 64bit
->char     - 16bit
->Boolean  - 1bit
}

non-premitive Data Types{
->array
->Object
->Classes
}


-------------------------------------------------------------------------day-3------------------------------------------------------------------------------

how to create a variable?
-------------------------

-> Accessmodifier static(or)final datatype variablename = value;
-> if you use final you can't change the value.
-> long g = 2147463647L; if the value is greater than int you must mention "L".

-------------------------------------------------------------------------day-4------------------------------------------------------------------------------

create object
---------------

class Raja{
	int k=20;
    static float g=22.1f;
int add(){
	sop("welcome");
	return (int);
}
psvm(){
	sop(g);
	Raja r=new Raja()
	r.add();
}
}

how to create object reference?
------------------------------

	classname variablename = new classname(); // new is a keyword


sample code
-----------


class Raja{
	
int add(){
	sop("welcome");
	return 40;
}
psvm(){
	Raja r=new Raja()
	int y= r.add();
	sop(y);
}
}

single line object
-------------------

class Raja{
	
int add(){
	sop("welcome");
	return 40;
}
psvm(){
	int y= new Raja().add();
	sop(y);
}
}

type casting
------------

class Raja{
	
float add(){
	sop("welcome");
	return 40;
}
psvm(){
	int y= (int)new Raja().add();
	sop(y);
}
}

-------------------------------------------------------------------------day-5------------------------------------------------------------------------------
OOPS:->
-------
->Inheritance
->Polymorphism
->Encapsulation
->Constructor
->Abstraction
->Interface

class creation:
---------------

--> do not create public class in first

->1.private
->2.protect
->3.default
->4.public


->Inheritance->{

multilevel Inheritence:
-----------------------

ex1:
----

pubic class Ramu{
void m1(){
   sop("Hello");
}
}
public class Raja extend Ramu{
void m2(){
  sop("hi");
}
psvm(){
 Raja r = new Raja();
 r.m1();
 r.m2();
}
}


ex2:
----

pubic class Ramu{
void m1(){
   sop("Ramu");
}
}
pubic class Tamil{
void m2(){
   sop("Tamil");
}
}
public class Raja extend Ramu{
void m2(float z,char a){
  sop("Raja");
  float t = z;
  char t1 = a;
  sop(t);
  sop(t1);
 //sop(z);
 //sop(a);
}
psvm(){
 Raja r = new Raja();
 // Ramu r = new Raja(); //dynamic metod
 r.m1();
 r.m2();
}
}

}<-


-------------------------------------------------------------------------day-6------------------------------------------------------------------------------

constructor->{

ex1
----
pubic class Ramu{
Ramu(){
   sop("Ramu");
}
psvm(){
 Ramu a = new Ramu();
}
}

ex2
---

pubic class Ramu{
Ramu(int y,int x){
   int z=y+x;
   sop(z);
}
psvm(){
 Ramu a = new Ramu(20,10);
}
}

ex3
---

class Raja{
 int a =20;
public Raja(){
   super();
   sop("Raja");
}
}
class Ramu extends Raja{
 int b =30;
public Ramu(){
   super();
   sop("Ramu");
}
psvm(){
 Ramu a = new Ramu();
 sop(a.a());
 sop(a.b());
}
}



}<-

-------------------------------------------------------------------------day-7------------------------------------------------------------------------------

ex1:
----

package Programs;
class Ramu {
	Ramu(int y,int r){
		int g = y+r;
		System.out.println(g);
	}
		int z = 30;
	byte v = (byte) z;
       float m2() {
		System.out.println("Welcome");
		return 345566778889899f;
	}
	
	}

class Raja extends Ramu {
    Raja(int y, int r) {
		super(y, r);
	}

	int m1(int x,double z) {
    	System.out.println("Good");
    	System.out.println(x+z);
		return x;
    }
}

public class Inheritance extends Raja {

	Inheritance(int y, int r) {
		super(y, r);
	}

	public static void main(String[] args) {
		Inheritance i = new Inheritance(20,40);
		int a =i.m1(10, 15);
		System.out.println(a);
		float e = i.m2();
		System.out.println(e);
		

	}
	

}

-------------------------------------------------------------------------day-8------------------------------------------------------------------------------




